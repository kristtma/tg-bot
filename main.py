import telebot
from telebot import types
import sqlite3
import matplotlib.pyplot as plt
bot = telebot.TeleBot('7810697763:AAH6k1LpjJXnAYjmFlQO-0WWhq8q2ON_Ld4')

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìä –û—Ç—á–µ—Ç')
    btn2 = types.KeyboardButton('üí∏ –í–≤–æ–¥ —Ç—Ä–∞—Ç')
    btn3 = types.KeyboardButton('üí∞ –í–≤–æ–¥ –¥–æ—Ö–æ–¥–∞')
    markup.add(btn1, btn2, btn3)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('tgfinbot.sql')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT, 
            amount REAL, 
            category TEXT,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!', reply_markup=main_menu())

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('tgfinbot.sql')
    cur = conn.cursor()
    cur.execute('''
               CREATE TABLE IF NOT EXISTS users (
                   id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name VARCHAR(50),
                   pass VARCHAR(50)
               )
           ''')
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∏–º—è', reply_markup=main_menu())
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=main_menu())
    bot.register_next_step_handler(message, user_pass)

def user_pass(message):
    password = message.text.strip()
    conn = sqlite3.connect('tgfinbot.sql')
    cur = conn.cursor()
    cur.execute('INSERT INTO users (name, pass) VALUES (?, ?)', (name, password))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu())

@bot.message_handler(commands=['help'])
def main(message):
    bot.send_message(message.chat.id, 'Help information. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üí∏ –í–≤–æ–¥ —Ç—Ä–∞—Ç')
def ask_expense_amount(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:")
    bot.register_next_step_handler(message, save_expense_amount)

def save_expense_amount(message):
    global expense_amount
    try:
        expense_amount = float(message.text.strip())
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è):")
        bot.register_next_step_handler(message, save_expense_category)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, save_expense_amount)

def save_expense_category(message):
    category = message.text.strip()
    user_id = message.chat.id

    conn = sqlite3.connect('tgfinbot.sql')
    cur = conn.cursor()
    cur.execute('INSERT INTO transactions (user_id, type, amount, category) VALUES (?, ?, ?, ?)',
                (user_id, 'expense', expense_amount, category))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, f"‚úÖ –¢—Ä–∞—Ç–∞ {expense_amount} —Ä—É–±. –Ω–∞ {category} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üí∞ –í–≤–æ–¥ –¥–æ—Ö–æ–¥–∞')
def ask_income_amount(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, save_income_amount)

def save_income_amount(message):
    try:
        income_amount = float(message.text.strip())
        user_id = message.chat.id

        conn = sqlite3.connect('tgfinbot.sql')
        cur = conn.cursor()
        cur.execute('INSERT INTO transactions (user_id, type, amount, category) VALUES (?, ?, ?, ?)',
                    (user_id, 'income', income_amount, None))  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–ø–µ—Ä—å NULL
        conn.commit()
        cur.close()
        conn.close()

        bot.send_message(message.chat.id, f"‚úÖ –î–æ—Ö–æ–¥ {income_amount} —Ä—É–±. —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu())

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, save_income_amount)

    bot.send_message(message.chat.id, f"‚úÖ –î–æ—Ö–æ–¥ {income_amount} —Ä—É–±.  —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == 'üìä –û—Ç—á–µ—Ç')
def send_report(message):
    user_id = message.chat.id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('tgfinbot.sql')
    cur = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã
    cur.execute("SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'income'", (user_id,))
    total_income = cur.fetchone()[0]
    total_income = total_income if total_income else 0  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤, —Å—Ç–∞–≤–∏–º 0

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cur.execute("SELECT category, SUM(amount) FROM transactions WHERE user_id = ? AND type = 'expense' GROUP BY category", (user_id,))
    expenses = cur.fetchall()

    cur.close()
    conn.close()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    expense_categories = []
    expense_amounts = []

    for category, amount in expenses:
        if category and amount:
            expense_categories.append(category)
            expense_amounts.append(amount)

    total_expenses = sum(expense_amounts)

    # –°—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å
    balance = total_income - total_expenses

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = f"üìä *–û—Ç—á–µ—Ç –∑–∞ –ê–ø—Ä–µ–ª—å 2025*\n\n"
    report_text += f"*–î–æ—Ö–æ–¥—ã:* {total_income} —Ä—É–±.\n\n"
    report_text += "*–†–∞—Å—Ö–æ–¥—ã:*\n"
    for cat, amt in zip(expense_categories, expense_amounts):
        report_text += f"  - {cat}: {amt} —Ä—É–±.\n"
    report_text += f"\n*–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:* {total_expenses} —Ä—É–±.\n"
    report_text += f"\nüí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} —Ä—É–±."

    # –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
    if expense_categories:
        plt.figure(figsize=(6, 6))
        plt.pie(expense_amounts, labels=expense_categories, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
        plt.axis('equal')  # –ö—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        report_image_path = "report.png"
        plt.savefig(report_image_path, bbox_inches='tight')
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        bot.send_photo(message.chat.id, open(report_image_path, 'rb'), caption=report_text, parse_mode="Markdown")

    else:
        bot.send_message(message.chat.id, report_text, parse_mode="Markdown")

bot.polling(none_stop=True)

